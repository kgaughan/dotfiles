#!/usr/bin/env python3
#
# fetchenclosures
# by Keith Gaughan <http://stereochro.me/>
#
# Copyright (c) Keith Gaughan, 2011.
# All Rights Reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# This license is subject to the laws and courts of the Republic of
# Ireland.
#

"""
Fetches an RSS feed and saves its enclosures to a directory. Feed items
can be excluded if they've already been fetched and/or by the item title.
"""

import argparse
import dbm
import errno
from os import path
import pathlib
import re
import shutil
import socket
import sys
from urllib import request, error, parse
from xml.dom import minidom


__version__ = "0.2.0"


def get_enclosure_filename(enclosure, disposition):
    """
    Given an enclosure URL and a Content-Disposition header, get the
    filename to use when saving the enclosure.
    """
    filename = None
    if disposition is not None:
        parts = disposition.split("=", 1)
        if len(parts) == 2:
            _, filename = parts
    if filename is None:
        filename = enclosure
    # If enclosed in quotes, trim them.
    if filename[0] == '"' and filename[-1] == '"':
        filename = filename[1:-1]
    return path.basename(filename)


def children(node, types=()):
    """
    Turns the child nodes of a DOM element into an iterable.
    """
    child = node.firstChild
    while child is not None:
        if child.nodeType in types:
            yield child
        child = child.nextSibling


def parse_item(item, tags):
    """
    Extract the various fields of a feed item into a dict.
    """
    result = {}
    for child in children(item, (item.ELEMENT_NODE,)):
        if child.tagName in tags:
            if child.tagName == "enclosure":
                # Retro! NameNodeMap doesn't support 'in' properly, it
                # seems.
                if "url" not in child.attributes:
                    continue
                value = child.attributes["url"].value
            else:
                value = child.firstChild.data
            result[child.tagName] = value
    return result


def fetch_enclosure(url, guid, directory: pathlib.Path, cache):
    print(url, guid)
    fsrc = open_url(url)
    filename = get_enclosure_filename(url, fsrc.info().get("content-disposition"))
    cache[guid] = filename
    with open(directory / filename, "wb") as fdst:
        shutil.copyfileobj(fsrc, fdst)


def fetch(feed_url, directory: pathlib.Path, cache, patterns: list, link):
    """
    The meat! Fetch a feed, download its enclosures to a directory, but
    only do so if not already fetched or the title's excluded by some
    pattern.
    """
    compiled_patterns = [re.compile(pattern) for pattern in patterns]

    def excluded(title):
        return any(pattern.search(title) for pattern in compiled_patterns)

    def can_download(item, guid):
        if guid not in cache and not excluded(item["title"]):
            return link or "enclosure" in item
        return False

    try:
        ffeed = open_url(feed_url)
        for elem in minidom.parse(ffeed).getElementsByTagName("item"):
            item = parse_item(elem, ("title", "guid", "enclosure", "link"))
            guid = item.get("guid", item["link"])
            if can_download(item, guid):
                item_url = item["link"] if link else item["enclosure"]
                fetch_enclosure(item_url, guid, directory, cache)
    except error.HTTPError as err:
        # The server isn't happy, so don't bother.
        if err.code in (500, 502, 503, 504):
            return
        # Anything else, die loudly.
        raise
    except error.URLError as err:
        err_code, _ = err.reason
        # If it times out or is unreachable, we don't care: we just try again
        # later.
        if err_code in (errno.ETIMEDOUT, socket.EAI_NONAME):
            return
        # Anything else, die loudly.
        raise


def open_url(url):
    """
    Open a URL. Mindblowing, I know.
    """
    req = request.Request(url)
    req.add_header("User-Agent", f"fetchenclosures/{__version__}")
    return request.urlopen(req)


def check_directory(path):
    result = pathlib.Path(path)
    if not result.is_dir():
        raise argparse.ArgumentTypeError(f"not a directory: {path}")
    return result


def make_parser():
    parser = argparse.ArgumentParser(description="Fetch enclosures in an RSS feed")
    parser.add_argument(
        "-f",
        "--feed",
        required=True,
        help="Feed URL",
    )
    parser.add_argument(
        "-d",
        "--dir",
        required=True,
        type=check_directory,
        help="Destination directory",
    )
    parser.add_argument(
        "-c",
        "--cache",
        help="Cache file path",
    )
    parser.add_argument(
        "-e",
        "--exclude",
        action="append",
        help="Exclusion pattern",
        default=[],
    )
    parser.add_argument(
        "-l",
        "--link",
        action="store_true",
        help="Use the link tag rather than the enclosure as the download source",
    )
    return parser


def main():
    args = make_parser().parse_args()
    cache = {} if args.cache is None else dbm.open(args.cache, "c")
    fetch(args.feed, args.dir, cache, args.exclude, args.link)


if __name__ == "__main__":
    main()
