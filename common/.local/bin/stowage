#!/usr/bin/env python
"""
Stow, but in Python, and in a single file.
"""

from __future__ import print_function

import argparse
import fnmatch
import os
from os import path
import re


def install(args, is_excluded):
    for package in args.packages:
        for root, _, files in os.walk(package):
            files = [filename
                     for filename in files
                     if not is_excluded(filename)]
            if len(files) == 0:
                continue
            rest = root[len(package)+1:]
            dest = path.join(args.target, rest)
            if rest != '':
                if not args.dry_run:
                    os.makedirs(dest, mode=0o755)
                if args.verbose:
                    print("DIR", dest)
            for filename in files:
                dest_path = path.join(dest, filename)
                if path.exists(dest_path):
                    if args.verbose:
                        print("SKIP", dest_path)
                    continue
                rel_path = path.relpath(path.join(root, filename), dest)
                if not args.dry_run:
                    os.symlink(rel_path, dest_path)
                if args.verbose:
                    print("LINK", rel_path, dest_path)


def uninstall(args, is_excluded):
    dirs = []
    for package in args.packages:
        for root, _, files in os.walk(package):
            files = [filename
                     for filename in files
                     if not is_excluded(filename)]
            if len(files) == 0:
                continue
            rest = root[len(package)+1:]
            dest = path.join(args.target, rest)
            if rest != '':
                dirs.append(dest)
            for filename in files:
                dest_path = path.join(dest, filename)
                if path.islink(dest_path):
                    src_path = path.realpath(path.join(root, filename))
                    if path.realpath(dest_path) == src_path:
                        if not args.dry_run:
                            os.unlink(dest_path)
                        if args.verbose:
                            print("UNLINK", dest_path)
                    elif args.verbose:
                        print("SKIP", dest_path)
                elif args.verbose:
                    print("SKIP", dest_path)

    # Delete the directories if empty.
    for dir_path in sorted(dirs, key=len, reverse=True):
        try:
            if not args.dry_run:
                os.rmdir(dir_path)
            if args.verbose:
                print("RMDIR", dir_path)
        except OSError:
            pass


def make_argparser():
    parser = argparse.ArgumentParser(description='Stow, but in Python')
    parser.add_argument('--verbose', '-v',
                        action='store_true',
                        help='Verbose output')
    parser.add_argument('--target', '-t',
                        default=os.curdir,
                        help='Target directory in which to place symlinks')
    parser.add_argument('--exclude', '-x',
                        action='append', default=[],
                        help="Glob pattern of files to exclude")
    parser.add_argument('--dry-run', '-n',
                        action='store_true',
                        help='Dry run.')
    parser.add_argument('--uninstall', '-D',
                        action='store_false', dest='install',
                        help='Uninstall symlinks')
    parser.add_argument('packages', metavar='PACKAGE', nargs='+',
                        help='Packages to install')
    return parser


def main():
    args = make_argparser().parse_args()
    exclude = [re.compile(fnmatch.translate(pattern))
               for pattern in args.exclude]

    def is_excluded(filename):
        return any(pattern.match(filename) for pattern in exclude)

    if args.install:
        install(args, is_excluded)
    else:
        uninstall(args, is_excluded)


if __name__ == '__main__':
    main()
